/**
 * This class is generated by jOOQ
 */
package cleandb.cleanrawdata.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.5.4"
	},
	comments = "This class is generated by jOOQ"
)
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experiment extends org.jooq.impl.TableImpl<cleandb.cleanrawdata.tables.records.ExperimentRecord> {

	private static final long serialVersionUID = 1741656467;

	/**
	 * The reference instance of <code>CleanRawData.Experiment</code>
	 */
	public static final cleandb.cleanrawdata.tables.Experiment EXPERIMENT = new cleandb.cleanrawdata.tables.Experiment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<cleandb.cleanrawdata.tables.records.ExperimentRecord> getRecordType() {
		return cleandb.cleanrawdata.tables.records.ExperimentRecord.class;
	}

	/**
	 * The column <code>CleanRawData.Experiment.TrialID</code>.
	 */
	public final org.jooq.TableField<cleandb.cleanrawdata.tables.records.ExperimentRecord, byte[]> TRIALID = createField("TrialID", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "");

	/**
	 * The column <code>CleanRawData.Experiment.ExperimentID</code>.
	 */
	public final org.jooq.TableField<cleandb.cleanrawdata.tables.records.ExperimentRecord, java.lang.String> EXPERIMENTID = createField("ExperimentID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>CleanRawData.Experiment.ReplicationNum</code>.
	 */
	public final org.jooq.TableField<cleandb.cleanrawdata.tables.records.ExperimentRecord, java.lang.Integer> REPLICATIONNUM = createField("ReplicationNum", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>CleanRawData.Experiment</code> table reference
	 */
	public Experiment() {
		this("Experiment", null);
	}

	/**
	 * Create an aliased <code>CleanRawData.Experiment</code> table reference
	 */
	public Experiment(java.lang.String alias) {
		this(alias, cleandb.cleanrawdata.tables.Experiment.EXPERIMENT);
	}

	private Experiment(java.lang.String alias, org.jooq.Table<cleandb.cleanrawdata.tables.records.ExperimentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Experiment(java.lang.String alias, org.jooq.Table<cleandb.cleanrawdata.tables.records.ExperimentRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, cleandb.cleanrawdata.Cleanrawdata.CLEANRAWDATA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<cleandb.cleanrawdata.tables.records.ExperimentRecord> getPrimaryKey() {
		return cleandb.cleanrawdata.Keys.KEY_EXPERIMENT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<cleandb.cleanrawdata.tables.records.ExperimentRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<cleandb.cleanrawdata.tables.records.ExperimentRecord>>asList(cleandb.cleanrawdata.Keys.KEY_EXPERIMENT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public cleandb.cleanrawdata.tables.Experiment as(java.lang.String alias) {
		return new cleandb.cleanrawdata.tables.Experiment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public cleandb.cleanrawdata.tables.Experiment rename(java.lang.String name) {
		return new cleandb.cleanrawdata.tables.Experiment(name, null);
	}
}
