/**
 * This class is generated by jOOQ
 */
package schema.mysql.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.5.4"
	},
	comments = "This class is generated by jOOQ"
)
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NdbBinlogIndex extends org.jooq.impl.TableImpl<schema.mysql.tables.records.NdbBinlogIndexRecord> {

	private static final long serialVersionUID = 1081093894;

	/**
	 * The reference instance of <code>mysql.ndb_binlog_index</code>
	 */
	public static final schema.mysql.tables.NdbBinlogIndex NDB_BINLOG_INDEX = new schema.mysql.tables.NdbBinlogIndex();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<schema.mysql.tables.records.NdbBinlogIndexRecord> getRecordType() {
		return schema.mysql.tables.records.NdbBinlogIndexRecord.class;
	}

	/**
	 * The column <code>mysql.ndb_binlog_index.Position</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.NdbBinlogIndexRecord, org.jooq.types.ULong> POSITION = createField("Position", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>mysql.ndb_binlog_index.File</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.NdbBinlogIndexRecord, java.lang.String> FILE = createField("File", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>mysql.ndb_binlog_index.epoch</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.NdbBinlogIndexRecord, org.jooq.types.ULong> EPOCH = createField("epoch", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>mysql.ndb_binlog_index.inserts</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.NdbBinlogIndexRecord, org.jooq.types.ULong> INSERTS = createField("inserts", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>mysql.ndb_binlog_index.updates</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.NdbBinlogIndexRecord, org.jooq.types.ULong> UPDATES = createField("updates", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>mysql.ndb_binlog_index.deletes</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.NdbBinlogIndexRecord, org.jooq.types.ULong> DELETES = createField("deletes", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>mysql.ndb_binlog_index.schemaops</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.NdbBinlogIndexRecord, org.jooq.types.ULong> SCHEMAOPS = createField("schemaops", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

	/**
	 * Create a <code>mysql.ndb_binlog_index</code> table reference
	 */
	public NdbBinlogIndex() {
		this("ndb_binlog_index", null);
	}

	/**
	 * Create an aliased <code>mysql.ndb_binlog_index</code> table reference
	 */
	public NdbBinlogIndex(java.lang.String alias) {
		this(alias, schema.mysql.tables.NdbBinlogIndex.NDB_BINLOG_INDEX);
	}

	private NdbBinlogIndex(java.lang.String alias, org.jooq.Table<schema.mysql.tables.records.NdbBinlogIndexRecord> aliased) {
		this(alias, aliased, null);
	}

	private NdbBinlogIndex(java.lang.String alias, org.jooq.Table<schema.mysql.tables.records.NdbBinlogIndexRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, schema.mysql.Mysql.MYSQL, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<schema.mysql.tables.records.NdbBinlogIndexRecord> getPrimaryKey() {
		return schema.mysql.Keys.KEY_NDB_BINLOG_INDEX_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<schema.mysql.tables.records.NdbBinlogIndexRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<schema.mysql.tables.records.NdbBinlogIndexRecord>>asList(schema.mysql.Keys.KEY_NDB_BINLOG_INDEX_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public schema.mysql.tables.NdbBinlogIndex as(java.lang.String alias) {
		return new schema.mysql.tables.NdbBinlogIndex(alias, this);
	}

	/**
	 * Rename this table
	 */
	public schema.mysql.tables.NdbBinlogIndex rename(java.lang.String name) {
		return new schema.mysql.tables.NdbBinlogIndex(name, null);
	}
}
