/**
 * This class is generated by jOOQ
 */
package schema.mysql.tables;

/**
 * User defined functions
 */
@javax.annotation.Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.5.4"
	},
	comments = "This class is generated by jOOQ"
)
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Func extends org.jooq.impl.TableImpl<schema.mysql.tables.records.FuncRecord> {

	private static final long serialVersionUID = -1354714342;

	/**
	 * The reference instance of <code>mysql.func</code>
	 */
	public static final schema.mysql.tables.Func FUNC = new schema.mysql.tables.Func();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<schema.mysql.tables.records.FuncRecord> getRecordType() {
		return schema.mysql.tables.records.FuncRecord.class;
	}

	/**
	 * The column <code>mysql.func.name</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.FuncRecord, java.lang.String> NAME = createField("name", org.jooq.impl.SQLDataType.CHAR.length(64).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mysql.func.ret</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.FuncRecord, java.lang.Byte> RET = createField("ret", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mysql.func.dl</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.FuncRecord, java.lang.String> DL = createField("dl", org.jooq.impl.SQLDataType.CHAR.length(128).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mysql.func.type</code>.
	 */
	public final org.jooq.TableField<schema.mysql.tables.records.FuncRecord, schema.mysql.enums.FuncType> TYPE = createField("type", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(schema.mysql.enums.FuncType.class), this, "");

	/**
	 * Create a <code>mysql.func</code> table reference
	 */
	public Func() {
		this("func", null);
	}

	/**
	 * Create an aliased <code>mysql.func</code> table reference
	 */
	public Func(java.lang.String alias) {
		this(alias, schema.mysql.tables.Func.FUNC);
	}

	private Func(java.lang.String alias, org.jooq.Table<schema.mysql.tables.records.FuncRecord> aliased) {
		this(alias, aliased, null);
	}

	private Func(java.lang.String alias, org.jooq.Table<schema.mysql.tables.records.FuncRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, schema.mysql.Mysql.MYSQL, aliased, parameters, "User defined functions");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<schema.mysql.tables.records.FuncRecord> getPrimaryKey() {
		return schema.mysql.Keys.KEY_FUNC_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<schema.mysql.tables.records.FuncRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<schema.mysql.tables.records.FuncRecord>>asList(schema.mysql.Keys.KEY_FUNC_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public schema.mysql.tables.Func as(java.lang.String alias) {
		return new schema.mysql.tables.Func(alias, this);
	}

	/**
	 * Rename this table
	 */
	public schema.mysql.tables.Func rename(java.lang.String name) {
		return new schema.mysql.tables.Func(name, null);
	}
}
